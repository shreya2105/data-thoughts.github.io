#The stochastic block model for the Karate network showed a higher probability of a tie within groups versus in between two groups. Also, the assortativity of the faction is high, which seems to point at the same fact shown above by SBM model.
bor <- read.csv("adj_borrowmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
lend <- read.csv("adj_lendmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kercome <- read.csv("adj_keroricecome_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kergo <- read.csv("adj_keroricego_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
all <- bor + lend + kercome + kergo
meta <- read.csv("vil35_meta.csv", header = TRUE, as.is = TRUE)
#meta$castesubcaste <- as.factor(meta$castesubcaste)
n_all <- graph.adjacency(as.matrix(all), mode = "undirected", weighted = TRUE)
V(n_all)$caste <- meta$castesubcaste
V(n_all)$religion <- meta$hohreligion
V(n_all)$rooms <- meta$room_no
## removing the isolates
n_all <- delete.vertices(n_all, V(n_all)[degree(n_all)==0])
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(igraphdata)
library(ape) ## this package will help us easily plot the dendrograms for community detection algorithms that use hierarchical clustering
library(Matrix)
bor <- read.csv("adj_borrowmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
lend <- read.csv("adj_lendmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kercome <- read.csv("adj_keroricecome_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kergo <- read.csv("adj_keroricego_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
all <- bor + lend + kercome + kergo
meta <- read.csv("vil35_meta.csv", header = TRUE, as.is = TRUE)
meta$castesubcaste <- as.factor(meta$castesubcaste)
n_all <- graph.adjacency(as.matrix(all), mode = "undirected", weighted = TRUE)
V(n_all)$caste <- meta$castesubcaste
V(n_all)$religion <- meta$hohreligion
V(n_all)$rooms <- meta$room_no
## removing the isolates
n_all <- delete.vertices(n_all, V(n_all)[degree(n_all)==0])
str(n_all)
class(n_all)
n_all <- delete.vertices(n_all, V(n_all)[degree(n_all)==0])
all <- delete.vertices(all, V(all)[degree(all)==0])
igraph(n_all)
bor <- read.csv("adj_borrowmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
lend <- read.csv("adj_lendmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kercome <- read.csv("adj_keroricecome_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kergo <- read.csv("adj_keroricego_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
all <- bor + lend + kercome + kergo
meta <- read.csv("vil35_meta.csv", header = TRUE, as.is = TRUE)
meta$castesubcaste <- as.factor(meta$castesubcaste)
n_all <- graph.adjacency(as.matrix(all), mode = "undirected", weighted = TRUE)
V(n_all)$caste <- meta$castesubcaste
V(n_all)$religion <- meta$hohreligion
V(n_all)$rooms <- meta$room_no
## removing the isolates
n_all <- delete.vertices(n_all, V(n_all)[degree(n_all) == 0])
coreness(n_all)
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(igraphdata)
library(ape) ## this package will help us easily plot the dendrograms for community detection algorithms that use hierarchical clustering
library(Matrix)
bor <- read.csv("adj_borrowmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
lend <- read.csv("adj_lendmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kercome <- read.csv("adj_keroricecome_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kergo <- read.csv("adj_keroricego_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
all <- bor + lend + kercome + kergo
meta <- read.csv("vil35_meta.csv", header = TRUE, as.is = TRUE)
meta$castesubcaste <- as.factor(meta$castesubcaste)
n_all <- graph.adjacency(as.matrix(all), mode = "undirected", weighted = TRUE)
V(n_all)$caste <- meta$castesubcaste
V(n_all)$religion <- meta$hohreligion
V(n_all)$rooms <- meta$room_no
## removing the isolates
n_all <- delete.vertices(n_all, V(n_all)[degree(n_all) == 0])
n_all <- delete.vertices(graph.adjacency(n_all), V(n_all)[degree(n_all) == 0])
bor <- read.csv("adj_borrowmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
lend <- read.csv("adj_lendmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kercome <- read.csv("adj_keroricecome_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kergo <- read.csv("adj_keroricego_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
all <- bor + lend + kercome + kergo
meta <- read.csv("vil35_meta.csv", header = TRUE, as.is = TRUE)
meta$castesubcaste <- as.factor(meta$castesubcaste)
n_all <- graph.adjacency(as.matrix(all), mode = "undirected", weighted = TRUE)
V(n_all)$caste <- meta$castesubcaste
V(n_all)$religion <- meta$hohreligion
V(n_all)$rooms <- meta$room_no
## removing the isolates
n_all <- delete.vertices(n_all, V(n_all)[igraph::degree(n_all) == 0])
#Calculate maximum coreness of each node
coreness(n_all)
#Plotting the network with nodes colored by maximum coreness
colors<-rainbow(max(6))
plot(n_all, vertex.color = colors[coreness(n_all)], edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 9)
legend("topright", legend=c(1:6),col = colors,pch = 16,title = "Coreness")
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(igraphdata)
library(ape) ## this package will help us easily plot the dendrograms for community detection algorithms that use hierarchical clustering
library(Matrix)
#The stochastic block model for the Karate network showed a higher probability of a tie within groups versus in between two groups. Also, the assortativity of the faction is high, which seems to point at the same fact shown above by SBM model.
bor <- read.csv("adj_borrowmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
lend <- read.csv("adj_lendmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kercome <- read.csv("adj_keroricecome_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kergo <- read.csv("adj_keroricego_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
all <- bor + lend + kercome + kergo
meta <- read.csv("vil35_meta.csv", header = TRUE, as.is = TRUE)
meta$castesubcaste <- as.factor(meta$castesubcaste)
n_all <- graph.adjacency(as.matrix(all), mode = "undirected", weighted = TRUE)
V(n_all)$caste <- meta$castesubcaste
V(n_all)$religion <- meta$hohreligion
V(n_all)$rooms <- meta$room_no
## removing the isolates
n_all <- delete.vertices(n_all, V(n_all)[igraph::degree(n_all) == 0])
#Calculate maximum coreness of each node
coreness(n_all)
#Plotting the network with nodes colored by maximum coreness
colors<-rainbow(max(6))
plot(n_all, vertex.color = colors[coreness(n_all)], edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 9)
legend("topright", legend=c(1:6),col = colors,pch = 16,title = "Coreness")
frlay<-layout_with_fr(n_all)
#Finding the clusters in the village 35
fg <- cluster_fast_greedy(n_all, weights = E(n_all)$weight)
sizes(fg)
#Plotting castes to match with the alignment of clusters
plot(n_all, vertex.color = V(n_all)$caste, edge.width = E(n_all)$weight, vertex.label =NA, layout = frlay, vertex.size = 5)
legend("topright", legend = c("General", "Scheduled Caste", "OBC", "Scheduled Tribe", "Minority") , pch=19, col = categorical_pal(8))
#Plotting the identified clusters
plot(fg, n_all, edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6)
# Algorithm has identified 10 communities in this village. All the clusters have a mix of atleast two castes, which shows that the algorithm has used a different measure to cluster the nodes in this village. Considering that the Fast greedy algorithm uses heirarchical clustering to approximate modularity, here that's not evident atleast not in terms of castes, as in the previous assignment, we found that there was greater assortativity among people of same castes and same religion, and in the clusters here the nodes belonging to different castes are grouped in one cluster.
require(intergraph)
detach(package:igraph)
require(sna)
knet<-asNetwork(n_all) ## this is the function from intergraph that takes a igraph graph object and makes it into a statnet graph object
blockmodel(knet,ec = knet %v% "caste")
kbm<-blockmodel(knet,ec = knet %v% "caste")$block.model ## here, I'm saving just the matrix showing the probability of ties within and between each faction, the block model
table(blockmodel(knet,ec = knet %v% "caste")$block.membership)
detach(package:sna)
detach(package:intergraph)
require(igraph)
g_kar <- sample_sbm(164, pref.matrix = kbm, block.sizes = c(26,37,49,20,32), directed = FALSE)
assortativity(g_kar, c(rep(1,26), rep(2,37), rep(3,49), rep(4,20), rep(5,32)))
par(mfrow=c(1,2))
plot(g_kar,vertex.color = c(rep(1,26), rep(2,37), rep(3,49), rep(4,20), rep(5,32)), main = "Village_cluster", vertex.label = NA, vertex.size = 6, layout = frlay)
plot(n_all, main = "Village_real", vertex.color = V(n_all)$caste , vertex.label = NA, vertex.size = 6, layout = frlay)
detach(package:sna)
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(igraphdata)
library(ape) ## this package will help us easily plot the dendrograms for community detection algorithms that use hierarchical clustering
library(Matrix)
#The stochastic block model for the Karate network showed a higher probability of a tie within groups versus in between two groups. Also, the assortativity of the faction is high, which seems to point at the same fact shown above by SBM model.
bor <- read.csv("adj_borrowmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
lend <- read.csv("adj_lendmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kercome <- read.csv("adj_keroricecome_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kergo <- read.csv("adj_keroricego_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
all <- bor + lend + kercome + kergo
meta <- read.csv("vil35_meta.csv", header = TRUE, as.is = TRUE)
meta$castesubcaste <- as.factor(meta$castesubcaste)
n_all <- graph.adjacency(as.matrix(all), mode = "undirected", weighted = TRUE)
V(n_all)$caste <- meta$castesubcaste
V(n_all)$religion <- meta$hohreligion
V(n_all)$rooms <- meta$room_no
## removing the isolates
n_all <- delete.vertices(n_all, V(n_all)[igraph::degree(n_all) == 0])
#Calculate maximum coreness of each node
coreness(n_all)
#Plotting the network with nodes colored by maximum coreness
colors<-rainbow(max(6))
plot(n_all, vertex.color = colors[coreness(n_all)], edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 9)
legend("topright", legend=c(1:6),col = colors,pch = 16,title = "Coreness")
frlay<-layout_with_fr(n_all)
#Finding the clusters in the village 35
fg <- cluster_fast_greedy(n_all, weights = E(n_all)$weight)
sizes(fg)
#Plotting castes to match with the alignment of clusters
plot(n_all, vertex.color = V(n_all)$caste, edge.width = E(n_all)$weight, vertex.label =NA, layout = frlay, vertex.size = 5)
legend("topright", legend = c("General", "Scheduled Caste", "OBC", "Scheduled Tribe", "Minority") , pch=19, col = categorical_pal(8))
#Plotting the identified clusters
plot(fg, n_all, edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6)
# Algorithm has identified 10 communities in this village. All the clusters have a mix of atleast two castes, which shows that the algorithm has used a different measure to cluster the nodes in this village. Considering that the Fast greedy algorithm uses heirarchical clustering to approximate modularity, here that's not evident atleast not in terms of castes, as in the previous assignment, we found that there was greater assortativity among people of same castes and same religion, and in the clusters here the nodes belonging to different castes are grouped in one cluster.
require(intergraph)
detach(package:igraph)
require(sna)
knet<-asNetwork(n_all) ## this is the function from intergraph that takes a igraph graph object and makes it into a statnet graph object
blockmodel(knet,ec = knet %v% "caste")
kbm<-blockmodel(knet,ec = knet %v% "caste")$block.model ## here, I'm saving just the matrix showing the probability of ties within and between each faction, the block model
table(blockmodel(knet,ec = knet %v% "caste")$block.membership)
detach(package:sna)
detach(package:intergraph)
require(igraph)
g_kar <- sample_sbm(164, pref.matrix = kbm, block.sizes = c(26,37,49,20,32), directed = FALSE)
assortativity(g_kar, c(rep(1,26), rep(2,37), rep(3,49), rep(4,20), rep(5,32)))
par(mfrow=c(1,2))
plot(g_kar,vertex.color = c(rep(1,26), rep(2,37), rep(3,49), rep(4,20), rep(5,32)), main = "Village_SBM_cluster", vertex.label = NA, vertex.size = 6, layout = frlay)
plot(n_all, main = "Village_real", vertex.color = V(n_all)$caste , vertex.label = NA, vertex.size = 6, layout = frlay)
#Plotting castes to match with the alignment of clusters
par(mfrow=c(1,2))
plot(n_all, vertex.color = V(n_all)$caste, edge.width = E(n_all)$weight, vertex.label =NA, layout = frlay, vertex.size = 5)
legend("topright", legend = c("General", "Scheduled Caste", "OBC", "Scheduled Tribe", "Minority") , pch=19, col = categorical_pal(8))
#Plotting the identified clusters
plot(fg, n_all, edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6)
# Algorithm has identified 10 communities in this village. All the clusters have a mix of atleast two castes, which shows that the algorithm has used a different measure to cluster the nodes in this village. Considering that the Fast greedy algorithm uses heirarchical clustering to approximate modularity, here that's not evident atleast not in terms of castes, as in the previous assignment, we found that there was greater assortativity among people of same castes and same religion, and in the clusters here the nodes belonging to different castes are grouped in one cluster.
legend("bottomright", legend = c("General", "Scheduled Caste", "OBC", "Scheduled Tribe", "Minority") , pch=19, col = categorical_pal(8))
#Plotting castes to match with the alignment of clusters
par(mfrow=c(1,2))
plot(n_all, vertex.color = V(n_all)$caste, edge.width = E(n_all)$weight, vertex.label =NA, layout = frlay, vertex.size = 5)
legend("bottomright", legend = c("General", "Scheduled Caste", "OBC", "Scheduled Tribe", "Minority") , pch=19, col = categorical_pal(8))
#Plotting the identified clusters
plot(fg, n_all, edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6)
# Algorithm has identified 10 communities in this village. All the clusters have a mix of atleast two castes, which shows that the algorithm has used a different measure to cluster the nodes in this village. Considering that the Fast greedy algorithm uses heirarchical clustering to approximate modularity, here that's not evident atleast not in terms of castes, as in the previous assignment, we found that there was greater assortativity among people of same castes and same religion, and in the clusters here the nodes belonging to different castes are grouped in one cluster.
plot(n_all, vertex.color = V(n_all)$caste, edge.width = E(n_all)$weight, vertex.label =NA, layout = frlay, vertex.size = 5)
legend("bottomleft", legend = c("General", "Scheduled Caste", "OBC", "Scheduled Tribe", "Minority") , pch=19, col = categorical_pal(8))
#Plotting castes to match with the alignment of clusters
par(mfrow=c(1,2))
plot(n_all, vertex.color = V(n_all)$caste, edge.width = E(n_all)$weight, vertex.label =NA, layout = frlay, vertex.size = 5)
legend("bottomleft", legend = c("General", "Scheduled Caste", "OBC", "Scheduled Tribe", "Minority") , pch=19, col = categorical_pal(8))
#Plotting the identified clusters
plot(fg, n_all, edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6)
# Algorithm has identified 10 communities in this village. All the clusters have a mix of atleast two castes, which shows that the algorithm has used a different measure to cluster the nodes in this village. Considering that the Fast greedy algorithm uses heirarchical clustering to approximate modularity, here that's not evident atleast not in terms of castes, as in the previous assignment, we found that there was greater assortativity among people of same castes and same religion, and in the clusters here the nodes belonging to different castes are grouped in one cluster.
#Plotting castes to match with the alignment of clusters
par(mfrow=c(1,2))
plot(n_all, vertex.color = V(n_all)$caste, edge.width = E(n_all)$weight, vertex.label =NA, layout = frlay, vertex.size = 5)
legend("bottomleft", legend = c("General", "Scheduled Caste", "OBC", "Scheduled Tribe", "Minority") , pch=19, col = categorical_pal(8), cex = 0.75)
#Plotting the identified clusters
plot(fg, n_all, edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6)
# Algorithm has identified 10 communities in this village. All the clusters have a mix of atleast two castes, which shows that the algorithm has used a different measure to cluster the nodes in this village. Considering that the Fast greedy algorithm uses heirarchical clustering to approximate modularity, here that's not evident atleast not in terms of castes, as in the previous assignment, we found that there was greater assortativity among people of same castes and same religion, and in the clusters here the nodes belonging to different castes are grouped in one cluster.
#Plotting castes to match with the alignment of clusters
par(mfrow=c(1,2))
plot(n_all, vertex.color = V(n_all)$caste, edge.width = E(n_all)$weight, vertex.label =NA, layout = frlay, vertex.size = 5)
legend("bottomleft", legend = c("General", "Scheduled Caste", "OBC", "Scheduled Tribe", "Minority") , pch=19, col = categorical_pal(8), cex = 0.60, ncol = 2)
#Plotting the identified clusters
plot(fg, n_all, edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6)
# Algorithm has identified 10 communities in this village. All the clusters have a mix of atleast two castes, which shows that the algorithm has used a different measure to cluster the nodes in this village. Considering that the Fast greedy algorithm uses heirarchical clustering to approximate modularity, here that's not evident atleast not in terms of castes, as in the previous assignment, we found that there was greater assortativity among people of same castes and same religion, and in the clusters here the nodes belonging to different castes are grouped in one cluster.
#Plotting castes to match with the alignment of clusters
par(mfrow=c(1,2))
plot(n_all, vertex.color = V(n_all)$caste, edge.width = E(n_all)$weight, vertex.label =NA, layout = frlay, vertex.size = 5)
legend("bottomleft", legend = c("General", "Scheduled Caste", "OBC", "Scheduled Tribe", "Minority") , pch=19, col = categorical_pal(8), cex = 0.50, ncol = 2)
#Plotting the identified clusters
plot(fg, n_all, edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6)
# Algorithm has identified 10 communities in this village. All the clusters have a mix of atleast two castes, which shows that the algorithm has used a different measure to cluster the nodes in this village. Considering that the Fast greedy algorithm uses heirarchical clustering to approximate modularity, here that's not evident atleast not in terms of castes, as in the previous assignment, we found that there was greater assortativity among people of same castes and same religion, and in the clusters here the nodes belonging to different castes are grouped in one cluster.
bor <- read.csv("adj_borrowmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
lend <- read.csv("adj_lendmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kercome <- read.csv("adj_keroricecome_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kergo <- read.csv("adj_keroricego_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
all <- bor + lend + kercome + kergo
meta <- read.csv("vil35_meta.csv", header = TRUE, as.is = TRUE)
meta$castesubcaste <- as.factor(meta$castesubcaste)
n_all <- graph.adjacency(as.matrix(all), mode = "undirected", weighted = TRUE)
V(n_all)$caste <- meta$castesubcaste
V(n_all)$religion <- meta$hohreligion
V(n_all)$rooms <- meta$room_no
## removing the isolates
n_all <- delete.vertices(n_all, V(n_all)[igraph::degree(n_all) == 0])
#Calculate maximum coreness of each node
coreness(n_all)
#Plotting the network with nodes colored by maximum coreness
colors<-rainbow(max(6))
plot(n_all, vertex.color = colors[coreness(n_all)], edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6)
legend("topright", legend=c(1:6),col = colors,pch = 16,title = "Coreness")
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(igraphdata)
library(ape) ## this package will help us easily plot the dendrograms for community detection algorithms that use hierarchical clustering
library(Matrix)
#The stochastic block model for the Karate network showed a higher probability of a tie within groups versus in between two groups. Also, the assortativity of the faction is high, which seems to point at the same fact shown above by SBM model.
bor <- read.csv("adj_borrowmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
lend <- read.csv("adj_lendmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kercome <- read.csv("adj_keroricecome_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kergo <- read.csv("adj_keroricego_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
all <- bor + lend + kercome + kergo
meta <- read.csv("vil35_meta.csv", header = TRUE, as.is = TRUE)
meta$castesubcaste <- as.factor(meta$castesubcaste)
n_all <- graph.adjacency(as.matrix(all), mode = "undirected", weighted = TRUE)
V(n_all)$caste <- meta$castesubcaste
V(n_all)$religion <- meta$hohreligion
V(n_all)$rooms <- meta$room_no
## removing the isolates
n_all <- delete.vertices(n_all, V(n_all)[igraph::degree(n_all) == 0])
#Calculate maximum coreness of each node
coreness(n_all)
#Plotting the network with nodes colored by maximum coreness
colors<-rainbow(max(6))
plot(n_all, vertex.color = colors[coreness(n_all)], edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6)
legend("topright", legend=c(1:6),col = colors,pch = 16,title = "Coreness")
frlay<-layout_with_fr(n_all)
#Finding the clusters in the village 35
fg <- cluster_fast_greedy(n_all, weights = E(n_all)$weight)
sizes(fg)
#Plotting castes to match with the alignment of clusters
par(mfrow=c(1,2))
plot(n_all, vertex.color = V(n_all)$caste, edge.width = E(n_all)$weight, vertex.label =NA, layout = frlay, vertex.size = 5)
legend("bottomleft", legend = c("General", "Scheduled Caste", "OBC", "Scheduled Tribe", "Minority") , pch=19, col = categorical_pal(8), cex = 0.50, ncol = 2)
#Plotting the identified clusters
plot(fg, n_all, edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6)
# Algorithm has identified 10 communities in this village. All the clusters have a mix of atleast two castes, which shows that the algorithm has used a different measure to cluster the nodes in this village. Considering that the Fast greedy algorithm uses heirarchical clustering to approximate modularity, here that's not evident atleast not in terms of castes, as in the previous assignment, we found that there was greater assortativity among people of same castes and same religion, and in the clusters here the nodes belonging to different castes are grouped in one cluster.
#The blockmodel below determines the probability of ties within and between the households of different castes. The model shows weaker probability of ties within castes and even weaker probabilities of ties between different castes.
require(intergraph)
detach(package:igraph)
require(sna)
knet<-asNetwork(n_all)
blockmodel(knet,ec = knet %v% "caste")
kbm<-blockmodel(knet,ec = knet %v% "caste")$block.model
table(blockmodel(knet,ec = knet %v% "caste")$block.membership)
detach(package:sna)
detach(package:intergraph)
require(igraph)
g_kar <- sample_sbm(164, pref.matrix = kbm, block.sizes = c(26,37,49,20,32), directed = FALSE)
assortativity(g_kar, c(rep(1,26), rep(2,37), rep(3,49), rep(4,20), rep(5,32)))
par(mfrow=c(3,1))
plot(n_all, main = "Village_real", vertex.color = V(n_all)$caste , vertex.label = NA, vertex.size = 6, layout = frlay)
plot(g_kar,vertex.color = c(rep(1,26), rep(2,37), rep(3,49), rep(4,20), rep(5,32)), main = "Village_SBM_cluster", vertex.label = NA, vertex.size = 6, layout = frlay)
plot(fg, n_all, edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6, main = "Greedy clustering")
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(igraphdata)
library(ape) ## this package will help us easily plot the dendrograms for community detection algorithms that use hierarchical clustering
library(Matrix)
#The stochastic block model for the Karate network showed a higher probability of a tie within groups versus in between two groups. Also, the assortativity of the faction is high, which seems to point at the same fact shown above by SBM model.
bor <- read.csv("adj_borrowmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
lend <- read.csv("adj_lendmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kercome <- read.csv("adj_keroricecome_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kergo <- read.csv("adj_keroricego_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
all <- bor + lend + kercome + kergo
meta <- read.csv("vil35_meta.csv", header = TRUE, as.is = TRUE)
meta$castesubcaste <- as.factor(meta$castesubcaste)
n_all <- graph.adjacency(as.matrix(all), mode = "undirected", weighted = TRUE)
V(n_all)$caste <- meta$castesubcaste
V(n_all)$religion <- meta$hohreligion
V(n_all)$rooms <- meta$room_no
## removing the isolates
n_all <- delete.vertices(n_all, V(n_all)[igraph::degree(n_all) == 0])
#Calculate maximum coreness of each node
coreness(n_all)
#Plotting the network with nodes colored by maximum coreness
colors<-rainbow(max(6))
plot(n_all, vertex.color = colors[coreness(n_all)], edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6)
legend("topright", legend=c(1:6),col = colors,pch = 16,title = "Coreness")
frlay<-layout_with_fr(n_all)
#Finding the clusters in the village 35
fg <- cluster_fast_greedy(n_all, weights = E(n_all)$weight)
sizes(fg)
#Plotting castes to match with the alignment of clusters
par(mfrow=c(1,2))
plot(n_all, vertex.color = V(n_all)$caste, edge.width = E(n_all)$weight, vertex.label =NA, layout = frlay, vertex.size = 5)
legend("bottomleft", legend = c("General", "Scheduled Caste", "OBC", "Scheduled Tribe", "Minority") , pch=19, col = categorical_pal(8), cex = 0.50, ncol = 2)
#Plotting the identified clusters
plot(fg, n_all, edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6)
# Algorithm has identified 10 communities in this village. All the clusters have a mix of atleast two castes, which shows that the algorithm has used a different measure to cluster the nodes in this village. Considering that the Fast greedy algorithm uses heirarchical clustering to approximate modularity, here that's not evident atleast not in terms of castes, as in the previous assignment, we found that there was greater assortativity among people of same castes and same religion, and in the clusters here the nodes belonging to different castes are grouped in one cluster.
#The blockmodel below determines the probability of ties within and between the households of different castes. The model shows weaker probability of ties within castes and even weaker probabilities of ties between different castes.
require(intergraph)
detach(package:igraph)
require(sna)
knet<-asNetwork(n_all)
blockmodel(knet,ec = knet %v% "caste")
kbm<-blockmodel(knet,ec = knet %v% "caste")$block.model
table(blockmodel(knet,ec = knet %v% "caste")$block.membership)
detach(package:sna)
detach(package:intergraph)
require(igraph)
g_kar <- sample_sbm(164, pref.matrix = kbm, block.sizes = c(26,37,49,20,32), directed = FALSE)
assortativity(g_kar, c(rep(1,26), rep(2,37), rep(3,49), rep(4,20), rep(5,32)))
par(mfrow=c(2,2))
plot(n_all, main = "Village_real", vertex.color = V(n_all)$caste , vertex.label = NA, vertex.size = 6, layout = frlay)
plot(g_kar,vertex.color = c(rep(1,26), rep(2,37), rep(3,49), rep(4,20), rep(5,32)), main = "Village_SBM_cluster", vertex.label = NA, vertex.size = 6, layout = frlay)
plot(fg, n_all, edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6, main = "Greedy clustering")
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(igraphdata)
library(ape) ## this package will help us easily plot the dendrograms for community detection algorithms that use hierarchical clustering
library(Matrix)
#The stochastic block model for the Karate network showed a higher probability of a tie within groups versus in between two groups. Also, the assortativity of the faction is high, which seems to point at the same fact shown above by SBM model.
bor <- read.csv("adj_borrowmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
lend <- read.csv("adj_lendmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kercome <- read.csv("adj_keroricecome_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kergo <- read.csv("adj_keroricego_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
all <- bor + lend + kercome + kergo
meta <- read.csv("vil35_meta.csv", header = TRUE, as.is = TRUE)
meta$castesubcaste <- as.factor(meta$castesubcaste)
n_all <- graph.adjacency(as.matrix(all), mode = "undirected", weighted = TRUE)
V(n_all)$caste <- meta$castesubcaste
V(n_all)$religion <- meta$hohreligion
V(n_all)$rooms <- meta$room_no
## removing the isolates
n_all <- delete.vertices(n_all, V(n_all)[igraph::degree(n_all) == 0])
#Calculate maximum coreness of each node
coreness(n_all)
#Plotting the network with nodes colored by maximum coreness
colors<-rainbow(max(6))
plot(n_all, vertex.color = colors[coreness(n_all)], edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6)
legend("topright", legend=c(1:6),col = colors,pch = 16,title = "Coreness")
frlay<-layout_with_fr(n_all)
#Finding the clusters in the village 35
fg <- cluster_fast_greedy(n_all, weights = E(n_all)$weight)
sizes(fg)
#Plotting castes to match with the alignment of clusters
par(mfrow=c(1,2))
plot(n_all, vertex.color = V(n_all)$caste, edge.width = E(n_all)$weight, vertex.label =NA, layout = frlay, vertex.size = 5)
legend("bottomleft", legend = c("General", "Scheduled Caste", "OBC", "Scheduled Tribe", "Minority") , pch=19, col = categorical_pal(8), cex = 0.50, ncol = 2)
#Plotting the identified clusters
plot(fg, n_all, edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6)
# Algorithm has identified 10 communities in this village. All the clusters have a mix of atleast two castes, which shows that the algorithm has used a different measure to cluster the nodes in this village. Considering that the Fast greedy algorithm uses heirarchical clustering to approximate modularity, here that's not evident atleast not in terms of castes, as in the previous assignment, we found that there was greater assortativity among people of same castes and same religion, and in the clusters here the nodes belonging to different castes are grouped in one cluster.
#The blockmodel below determines the probability of ties within and between the households of different castes. The model shows weaker probability of ties within castes and even weaker probabilities of ties between different castes.
require(intergraph)
detach(package:igraph)
require(sna)
knet<-asNetwork(n_all)
blockmodel(knet,ec = knet %v% "caste")
kbm<-blockmodel(knet,ec = knet %v% "caste")$block.model
table(blockmodel(knet,ec = knet %v% "caste")$block.membership)
detach(package:sna)
detach(package:intergraph)
require(igraph)
g_kar <- sample_sbm(164, pref.matrix = kbm, block.sizes = c(26,37,49,20,32), directed = FALSE)
assortativity(g_kar, c(rep(1,26), rep(2,37), rep(3,49), rep(4,20), rep(5,32)))
par(mfrow=c(1,3))
plot(n_all, main = "Village_real", vertex.color = V(n_all)$caste , vertex.label = NA, vertex.size = 6, layout = frlay)
plot(g_kar,vertex.color = c(rep(1,26), rep(2,37), rep(3,49), rep(4,20), rep(5,32)), main = "Village_SBM_cluster", vertex.label = NA, vertex.size = 6, layout = frlay)
plot(fg, n_all, edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6, main = "Greedy clustering")
par(mfrow=c(1,3))
#plot(n_all, main = "Village_real", vertex.color = V(n_all)$caste , vertex.label = NA, vertex.size = 6, layout = frlay)
plot(g_kar,vertex.color = c(rep(1,26), rep(2,37), rep(3,49), rep(4,20), rep(5,32)), main = "Village_SBM_cluster", vertex.label = NA, vertex.size = 6, layout = frlay)
plot(fg, n_all, edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6, main = "Greedy clustering")
par(mfrow=c(1,2))
#plot(n_all, main = "Village_real", vertex.color = V(n_all)$caste , vertex.label = NA, vertex.size = 6, layout = frlay)
plot(g_kar,vertex.color = c(rep(1,26), rep(2,37), rep(3,49), rep(4,20), rep(5,32)), main = "Village_SBM_cluster", vertex.label = NA, vertex.size = 6, layout = frlay)
plot(fg, n_all, edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6, main = "Greedy clustering")
par(mfrow=c(1,3))
plot(n_all, main = "Village_real", vertex.color = V(n_all)$caste , vertex.label = NA, vertex.size = 6, layout = frlay)
plot(g_kar,vertex.color = c(rep(1,26), rep(2,37), rep(3,49), rep(4,20), rep(5,32)), main = "Village_SBM_cluster", vertex.label = NA, vertex.size = 6, layout = frlay)
plot(fg, n_all, edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6, main = "Greedy clustering")
Matrix_assor <- matrix (c(0.3, 0.005, 0.005,
0.005, 0.300, 0.005,
0.005, 0.005, 0.300), nrow = 3, ncol = 3, byrow = TRUE)
Matrix_sbm <- sample_sbm  (50, pref.matrix = Matrix_assor, block.sizes = c(20,20,10))
plot(Matrix_sbm,vertex.color = c(rep(1,20), rep(2,20), rep(3,10)), main = "Fabricated")
Matrix_ordered <- matrix (c(0.5, 0.3, 0.001,
0.3, 0.5, 0.3,
0.001, 0.3, 0.500), nrow = 3, ncol = 3, byrow = TRUE)
Matrix_sbm_o <- sample_sbm  (50, pref.matrix = Matrix_ordered, block.sizes = c(20,20,10))
plot(Matrix_sbm_o,vertex.color = c(rep(1,20), rep(2,20), rep(3,10)), main = "Fabricated")
plot(Matrix_sbm_o,vertex.color = c(rep(1,20), rep(2,20), rep(3,10)), main = "Ordered", vertex.label = NA, vertex.size = 7)
Matrix_core <- matrix (c(0.7, 0.2, 0.10,
0.2, 0.4, 0.10,
0.1, 0.1, 0.25), nrow = 3, ncol = 3, byrow = TRUE)
Matrix_sbm_core <- sample_sbm  (50, pref.matrix = Matrix_core, block.sizes = c(20,20,10))
plot(Matrix_sbm_core,vertex.color = c(rep(1,20), rep(2,20), rep(3,10)), main = "Core Periphery", vertex.label = NA, vertex.size = 7)
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(igraphdata)
library(ape) ## this package will help us easily plot the dendrograms for community detection algorithms that use hierarchical clustering
library(Matrix)
#The stochastic block model for the Karate network showed a higher probability of a tie within groups versus in between two groups. The model could capture the presence of the two primary factions in the network and the dynamics within each group through tie probabilities. The assortativity of the faction is high, which seems to point at the same fact shown above by SBM model.
#Assortativity
Matrix_assor <- matrix (c(0.3, 0.005, 0.005,
0.005, 0.300, 0.005,
0.005, 0.005, 0.300), nrow = 3, ncol = 3, byrow = TRUE)
Matrix_sbm <- sample_sbm  (50, pref.matrix = Matrix_assor, block.sizes = c(20,20,10))
plot(Matrix_sbm,vertex.color = c(rep(1,20), rep(2,20), rep(3,10)), main = "Assortative", vertex.label = NA, vertex.size = 7)
#Ordered
Matrix_ordered <- matrix (c(0.5, 0.3, 0.001,
0.3, 0.5, 0.3,
0.001, 0.3, 0.500), nrow = 3, ncol = 3, byrow = TRUE)
Matrix_sbm_o <- sample_sbm  (50, pref.matrix = Matrix_ordered, block.sizes = c(20,20,10))
plot(Matrix_sbm_o,vertex.color = c(rep(1,20), rep(2,20), rep(3,10)), main = "Ordered", vertex.label = NA, vertex.size = 7)
#Core periphery
Matrix_core <- matrix (c(0.7, 0.2, 0.10,
0.2, 0.4, 0.10,
0.1, 0.1, 0.25), nrow = 3, ncol = 3, byrow = TRUE)
Matrix_sbm_core <- sample_sbm  (50, pref.matrix = Matrix_core, block.sizes = c(20,20,10))
plot(Matrix_sbm_core,vertex.color = c(rep(1,20), rep(2,20), rep(3,10)), main = "Core Periphery", vertex.label = NA, vertex.size = 7)
bor <- read.csv("adj_borrowmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
lend <- read.csv("adj_lendmoney_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kercome <- read.csv("adj_keroricecome_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
kergo <- read.csv("adj_keroricego_HH_vilno_35.csv", header = FALSE, as.is = TRUE)
all <- bor + lend + kercome + kergo
meta <- read.csv("vil35_meta.csv", header = TRUE, as.is = TRUE)
meta$castesubcaste <- as.factor(meta$castesubcaste)
n_all <- graph.adjacency(as.matrix(all), mode = "undirected", weighted = TRUE)
V(n_all)$caste <- meta$castesubcaste
V(n_all)$religion <- meta$hohreligion
V(n_all)$rooms <- meta$room_no
## removing the isolates
n_all <- delete.vertices(n_all, V(n_all)[igraph::degree(n_all) == 0])
#Calculate maximum coreness of each node
coreness(n_all)
#Plotting the network with nodes colored by maximum coreness
colors<-rainbow(max(6))
plot(n_all, vertex.color = colors[coreness(n_all)], edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6)
legend("topright", legend=c(1:6),col = colors,pch = 16,title = "Coreness")
frlay<-layout_with_fr(n_all)
#Finding the clusters in the village 35
fg <- cluster_fast_greedy(n_all, weights = E(n_all)$weight)
sizes(fg)
#Plotting castes to match with the alignment of clusters
par(mfrow=c(1,2))
plot(n_all, vertex.color = V(n_all)$caste, edge.width = E(n_all)$weight, vertex.label =NA, layout = frlay, vertex.size = 5)
legend("bottomleft", legend = c("General", "Scheduled Caste", "OBC", "Scheduled Tribe", "Minority") , pch=19, col = categorical_pal(8), cex = 0.50, ncol = 2)
#Plotting the identified clusters
plot(fg, n_all, edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6)
# Algorithm has identified 10 communities in this village. All the clusters have a mix of atleast two castes, which shows that the algorithm has used a different measure to cluster the nodes in this village. Considering that the Fast greedy algorithm uses heirarchical clustering to approximate modularity, here that's not evident atleast not in terms of castes, as in the previous assignment, we found that there was greater assortativity among people of same castes and same religion, and in the clusters here the nodes belonging to different castes are grouped in one cluster.
#The blockmodel below determines the probability of ties within and between the clusters. The model shows weaker probability of ties within castes and even weaker probabilities of ties between different caste clusters. SBM formed five clusters considering the five castes, in comparison, greedy classifier, found 10 clusters based on modularity between and within considered clusters. Below, a set of nodes (yellow colored) are clustered together in both the algorithms, though nodes belong to dissimilar castes in the original network graph of the village.
require(intergraph)
detach(package:igraph)
require(sna)
knet<-asNetwork(n_all)
blockmodel(knet,ec = knet %v% "caste")
kbm<-blockmodel(knet,ec = knet %v% "caste")$block.model
table(blockmodel(knet,ec = knet %v% "caste")$block.membership)
detach(package:sna)
detach(package:intergraph)
require(igraph)
g_kar <- sample_sbm(164, pref.matrix = kbm, block.sizes = c(26,37,49,20,32), directed = FALSE)
assortativity(g_kar, c(rep(1,26), rep(2,37), rep(3,49), rep(4,20), rep(5,32)))
par(mfrow=c(1,3))
plot(n_all, main = "Village_real", vertex.color = V(n_all)$caste , vertex.label = NA, vertex.size = 6, layout = frlay)
plot(g_kar,vertex.color = c(rep(1,26), rep(2,37), rep(3,49), rep(4,20), rep(5,32)), main = "Village_SBM_cluster", vertex.label = NA, vertex.size = 6, layout = frlay)
plot(fg, n_all, edge.width = E(n_all)$weight, layout = frlay, vertex.label = NA, vertex.size = 6, main = "Greedy clustering")
